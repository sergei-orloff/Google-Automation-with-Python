Your task is to debug a Python script below. The program processes the file but it takes a long time to complete. This is because the program goes slowly line by line instead of printing the report quickly. You need to debug why the program is slow and then fix it. You need to find bottlenecks, improve the code, and make it finish faster.
The problem with the script is that itâ€™s downloading the whole file and then going over it for each date. The current script takes almost 2 minutes to complete for 2019-01-01. An optimized script should generate reports for the same date within a few seconds.
In the script below,  modify the get_same_or_newer() function to preprocess the file, so that the output generated can be used for various dates instead of just one.
Here are few hints to fix this issue:
1. Download the file only once from the URL.
2. Pre-process it so that the same calculation doesn't need to be done over and over again. This can be done in two ways. You can choose any one of them:
   * To create a dictionary with the start dates and then use the data in the dictionary instead of the complicated calculation.
   * To sort the data by start_date and then go date by date.
Choose any one of the above preprocessing options and modify the script accordingly.
===================================================================
EXPLANATION:
Data preprocessing: The get_same_or_newer() function now downloads the file only once and processes it into a dictionary (employee_dates) where the keys are dates and the values are lists of employees who started on those dates.
Efficient data structure: Using defaultdict(list) allows for easy appending of employees to each date without explicitly checking if the date exists in the dictionary.
Sorted dates: All unique dates are sorted once, making it efficient to find the next closest date for any given input date.
Single pass through data: The script now only needs to go through the CSV data once, storing the information in a way that makes subsequent queries very fast.

These optimizations should significantly improve the performance of the script. Instead of processing the entire file for each date query, it processes the file once and then uses the preprocessed data for all subsequent queries.
The main improvements are:

Only one network request to download the file
Data is structured for quick access
Dates are pre-sorted for efficient searching
Memory usage is optimized by storing only necessary information

To use this optimized script:

The file is downloaded and processed only once when get_same_or_newer() is first called
The preprocessed data is used for all subsequent date queries
Finding employees for a given date is now an O(log n) operation due to the sorted list of dates

This implementation should be significantly faster than the original version, especially when querying multiple dates.